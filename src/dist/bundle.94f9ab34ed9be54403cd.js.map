{"version":3,"file":"bundle.94f9ab34ed9be54403cd.js","mappings":"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","sources":["webpack://snakejs/webpack/bootstrap","webpack://snakejs/webpack/runtime/global","webpack://snakejs/webpack/runtime/publicPath","webpack://snakejs/./src/assets/point.mp3","webpack://snakejs/./src/assets/gameover.wav","webpack://snakejs/./src/assets/speed_acceleration.wav","webpack://snakejs/./src/assets/jump.wav","webpack://snakejs/./src/assets/start.wav","webpack://snakejs/./src/script/functions/handleInitializeAudio.js","webpack://snakejs/./src/script/functions/RandInt.js","webpack://snakejs/./src/script/classes/Snake.js","webpack://snakejs/./src/script/global/variables.js","webpack://snakejs/./src/script/functions/handleValidateBoardSize.js","webpack://snakejs/./src/script/global/elements.js","webpack://snakejs/./src/script/functions/handleDisplay.js","webpack://snakejs/./src/script/classes/Boost.js","webpack://snakejs/./src/script/functions/GameOver.js","webpack://snakejs/./src/script/classes/Food.js","webpack://snakejs/./src/script/functions/getNewTile.js","webpack://snakejs/./src/script/classes/Bonus.js","webpack://snakejs/./src/script/functions/handlePlaceTile.js","webpack://snakejs/./src/script/functions/handleMoveSnake.js","webpack://snakejs/./src/script/functions/handleJump.js","webpack://snakejs/./src/script/functions/handleUpdateSnake.js","webpack://snakejs/./src/script/functions/handleKeyPress.js","webpack://snakejs/./src/script/functions/handleStartGame.js","webpack://snakejs/./src/script.js","webpack://snakejs/./src/script/global/keys.js","webpack://snakejs/./src/script/functions/handleGenerateBoard.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export default __webpack_public_path__ + \"assets/point.a41846ef811ebc769132d677a9d33a21.mp3\";","export default __webpack_public_path__ + \"assets/gameover.0242c96fc833693dc721ea75ebb2d1b4.wav\";","export default __webpack_public_path__ + \"assets/speed_acceleration.952b0801786b04a70a0133de0ce831a6.wav\";","export default __webpack_public_path__ + \"assets/jump.ae2de8e7e136703f362699ea22c8a8c5.wav\";","export default __webpack_public_path__ + \"assets/start.105e220c664c62490ce0c19c670010fc.wav\";","import POINT_SRC from \"../../assets/point.mp3\";\r\nimport GAME_OVER_SRC from \"../../assets/gameover.wav\";\r\nimport SNAKESPEED_SRC from \"../../assets/speed_acceleration.wav\";\r\nimport JUMP_SRC from \"../../assets/jump.wav\";\r\nimport START_SRC from \"../../assets/start.wav\";\r\n\r\nexport const start = new Audio();\r\nexport const jump = new Audio();\r\nexport const snakespeed = new Audio();\r\nexport const point = new Audio();\r\nexport const gameOver = new Audio();\r\n\r\nconst handleInitializeAudio = () => {\r\n  point.src = POINT_SRC;\r\n  gameOver.src = GAME_OVER_SRC;\r\n  snakespeed.src = SNAKESPEED_SRC;\r\n  jump.src = JUMP_SRC;\r\n  start.src = START_SRC;\r\n\r\n  start.volume = 0.07;\r\n  jump.volume = 0.1;\r\n  point.volue = 0.2;\r\n  snakespeed.volume = 0.3;\r\n  gameOver.volume = 0.3;\r\n};\r\n\r\nexport default handleInitializeAudio;\r\n","const RandInt = ({ min, max }) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport default RandInt;\r\n","class Snake {\r\n  constructor(direction, length, speed, x, y, jumps = 0) {\r\n    this.direction = direction;\r\n    this.length = length;\r\n    this.speed = speed;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.jumps = jumps;\r\n  }\r\n}\r\n\r\nexport default Snake;\r\n","import handleValidateBoardSize from \"../functions/handleValidateBoardSize.js\";\r\n\r\n// board variables\r\nexport const board = [];\r\nexport const sizeRange = { min: 10, max: 50 };\r\nexport let boardSize = handleValidateBoardSize();\r\n\r\n// classes\r\nexport let snake = {\r\n  class: \"\",\r\n  set: ({ payload, attr }) => {\r\n    if (attr) {\r\n      snake.class[attr] = payload;\r\n      return;\r\n    }\r\n\r\n    snake.class = payload;\r\n  },\r\n};\r\nexport let food = {\r\n  class: \"\",\r\n  set: ({ payload, attr }) => {\r\n    if (attr) {\r\n      food.class[attr] = payload;\r\n      return;\r\n    }\r\n\r\n    food.class = payload;\r\n  },\r\n};\r\nexport const bonuses = [];\r\n\r\n// checks whether the game has already started\r\nexport let gameStarted = {\r\n  val: false,\r\n  set: (value) => {\r\n    gameStarted.val = value;\r\n  },\r\n};\r\n\r\n// contains positions of all snake's tiles\r\nexport const snakePositions = [];\r\n\r\nexport let timer = {\r\n  time: 0,\r\n  increment: () => {\r\n    timer.time++;\r\n  },\r\n};\r\n\r\nexport let mute = {\r\n  isMuted: false,\r\n  toggle: () => {\r\n    mute.isMuted = !mute.isMuted;\r\n  },\r\n};\r\nexport let interval = {\r\n  val: 0,\r\n  set: (payload) => {\r\n    interval.val = payload;\r\n  },\r\n};\r\n\r\n// intervals\r\nexport let gameInterval = {\r\n  interval: \"\",\r\n  set: (func) => {\r\n    gameInterval.interval = func;\r\n  },\r\n};\r\nexport let timerInterval = {\r\n  interval: \"\",\r\n  set: (func) => {\r\n    timerInterval.interval = func;\r\n  },\r\n};\r\n\r\n// speed constant (used for snake intervals)\r\nexport const SPEED_CONSTANT = 4;\r\n\r\n// checks whether the snake has moved since last set direction\r\nexport let snakeDidMove = {\r\n  state: false,\r\n  toggle: () => {\r\n    snakeDidMove.state = !snakeDidMove.state;\r\n  },\r\n};\r\n","import { sizeRange } from \"../global/variables.js\";\r\n\r\nconst handleValidateBoardSize = () => {\r\n  let size;\r\n\r\n  while (!size || size < sizeRange.min || size > sizeRange.max) {\r\n    const input = prompt(\r\n      `Podaj wielkość planszy (minimalna - ${sizeRange.min}, maksymalna - ${sizeRange.max}):`\r\n    );\r\n    size = parseInt(input);\r\n\r\n    if (!size || size < sizeRange.min || size > sizeRange.max) {\r\n      alert(\"Wprowadź poprawną wartość!\");\r\n    }\r\n  }\r\n\r\n  return size;\r\n};\r\n\r\nexport default handleValidateBoardSize;\r\n","export const time = document.querySelector(\"[data-parameter=time]\");\r\nexport const size = document.querySelector(\"[data-parameter=board-size]\");\r\nexport const parameterSpeed = document.querySelector(\"[data-parameter=speed]\");\r\nexport const length = document.querySelector(\"[data-parameter=length]\");\r\n\r\nexport const topBtn = document.querySelector(\"[data-direction=top]\");\r\nexport const bottomBtn = document.querySelector(\"[data-direction=bottom]\");\r\nexport const leftBtn = document.querySelector(\"[data-direction=left]\");\r\nexport const rightBtn = document.querySelector(\"[data-direction=right]\");\r\n\r\nexport const gameBoard = document.querySelector(\".gameboard\");\r\n\r\nexport const sound = document.querySelector(\".sound\");\r\n\r\nexport const controlBtns = document.querySelectorAll(\".control\");\r\n","import { length, parameterSpeed, size, time } from \"../global/elements.js\";\r\n\r\nconst handleDisplay = ({ snakeLength, speed, timer, boardSize }) => {\r\n  if (speed) parameterSpeed.textContent = `${speed}`;\r\n  if (snakeLength) length.textContent = `Długość: ${snakeLength}`;\r\n  if (boardSize)\r\n    size.textContent = `Rozmiar planszy: ${boardSize}x${boardSize}`;\r\n  if (timer)\r\n    time.textContent = `Czas gry: \r\n    ${\r\n      Math.floor(timer / 60 / 60) < 10\r\n        ? \"0\" + Math.floor(timer / 60 / 60)\r\n        : Math.floor(timer / 60 / 60)\r\n    }:${\r\n      Math.floor(timer / 60) % 60 < 10\r\n        ? \"0\" + (Math.floor(timer / 60) % 60)\r\n        : Math.floor(timer / 60) % 60\r\n    }:${timer % 60 < 10 ? \"0\" + (timer % 60) : timer % 60}\r\n    `;\r\n};\r\n\r\nexport default handleDisplay;\r\n","class Boost {\r\n  constructor(x, y, name = \"\") {\r\n    this.name = name;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\nexport default Boost;\r\n","const GameOver = () => {\r\n  const payload = {\r\n    score: snake.length,\r\n    jumps: snake.jumps,\r\n    time: {\r\n      hours: Math.floor(timer / 60 / 60),\r\n      minutes: Math.floor(timer / 60) % 60,\r\n      seconds: timer % 60,\r\n    },\r\n  };\r\n\r\n  clearInterval(timerInterval);\r\n  clearInterval(gameInterval);\r\n\r\n  if (!mute) gameOver.play();\r\n};\r\n\r\nexport default GameOver;\r\n","import { point } from \"../functions/handleInitializeAudio.js\";\r\nimport handlePlaceTile from \"../functions/handlePlaceTile.js\";\r\nimport { board, snake, snakePositions } from \"../global/variables.js\";\r\nimport Boost from \"./Boost.js\";\r\nimport getNewTile from \"../functions/getNewTile.js\";\r\nimport { length } from \"../global/elements.js\";\r\n\r\nclass Food extends Boost {\r\n  handleIsEaten = () => {\r\n    if (snake.class.x === this.x && snake.class.y === this.y) {\r\n      if (!mute.isMuted) {\r\n        point.play();\r\n      }\r\n\r\n      board[this.y][this.x].classList.remove(\"tile--food\");\r\n      handlePlaceTile({ mode: \"food\" });\r\n\r\n      //TODO: adding new tiles to the end of the snake\r\n      const { x: firstX, y: firstY } = snakePositions[0];\r\n      const { x: nextX, y: nextY } = snakePositions[1];\r\n\r\n      const subX = nextX - firstX;\r\n      const subY = nextY - firstY;\r\n\r\n      const { newX, newY } = getNewTile(subX, subY, firstX, firstY);\r\n\r\n      snake.class.length++;\r\n      length.textContent = snake.length;\r\n      length.style.color = \"#d1d122\";\r\n\r\n      snakePositions.unshift({ x: newX, y: newY });\r\n      board[newY][newX].classList.add(\"tile--snake\");\r\n\r\n      setTimeout(() => {\r\n        length.style.color = \"#000\";\r\n      }, 300);\r\n    }\r\n  };\r\n}\r\n\r\nexport default Food;\r\n","import { board, boardSize } from \"../global/variables.js\";\r\nimport GameOver from \"./GameOver.js\";\r\n\r\nconst getNewTile = (subX, subY, firstX, firstY) => {\r\n  let x = firstX;\r\n  let y = firstY;\r\n\r\n  if (subX !== 0) {\r\n    x = (firstX - subX + boardSize) % boardSize;\r\n  } else if (subY !== 0) {\r\n    y = (firstY - subY + boardSize) % boardSize;\r\n  }\r\n\r\n  if (board[y][x].classList.contains(\"tile--snake\")) {\r\n    //! game over\r\n    GameOver();\r\n  }\r\n\r\n  return { newX: x, newY: y };\r\n};\r\n\r\nexport default getNewTile;\r\n","import Boost from \"./Boost.js\";\r\n\r\nclass Bonus extends Boost {\r\n  handleTransformBonus = () => {};\r\n\r\n  handleIsEaten = () => {};\r\n}\r\n\r\nexport default Bonus;\r\n","import { board, boardSize, bonuses, food } from \"../global/variables.js\";\r\nimport RandInt from \"./RandInt.js\";\r\nimport Food from \"../classes/Food.js\";\r\nimport Bonus from \"../classes/Bonus.js\";\r\n\r\nconst handlePlaceTile = ({ mode }) => {\r\n  const tiles = document.querySelectorAll(\".tile\");\r\n  const freeTiles = document.querySelectorAll(\r\n    \".tile:not(.tile--snake):not(.tile--boost)\"\r\n  );\r\n\r\n  const randTileId = RandInt({ min: 0, max: freeTiles.length - 1 });\r\n\r\n  const indexOfFreeTile = Array.from(tiles).indexOf(freeTiles[randTileId]);\r\n  const tileCoordinates = {\r\n    x: indexOfFreeTile % boardSize,\r\n    y: Math.floor(indexOfFreeTile / boardSize),\r\n  };\r\n\r\n  // console.log(indexOfFreeTile % boardSize);\r\n\r\n  const { x, y } = tileCoordinates;\r\n\r\n  // mark food or bonus on the board\r\n  switch (mode) {\r\n    case \"food\":\r\n      food.class = new Food(x, y);\r\n\r\n      board[food.class.y][food.class.x].classList.add(\"tile--food\");\r\n      break;\r\n    case \"bonus\":\r\n      let bonus = new Bonus(\"bonus\", x, y);\r\n\r\n      bonuses.push(bonus);\r\n      break;\r\n    default:\r\n      console.error(\"#ERR! -> Przesłano niepoprawny typ bonusu\");\r\n      break;\r\n  }\r\n};\r\n\r\nexport default handlePlaceTile;\r\n","import { board, food, snake, snakePositions } from \"../global/variables.js\";\r\nimport GameOver from \"./GameOver.js\";\r\n\r\nconst handleMoveSnake = () => {\r\n  const { x, y } = snakePositions[0];\r\n  if (board[snake.class.y][snake.class.x].classList.contains(\"tile--snake\")) {\r\n    GameOver();\r\n    return;\r\n  }\r\n\r\n  board[snake.class.y][snake.class.x].classList.add(\"tile--snake\");\r\n  snakePositions.push({ x: snake.class.x, y: snake.class.y });\r\n  board[y][x].classList.remove(\"tile--snake\");\r\n  snakePositions.shift();\r\n  food.class.handleIsEaten();\r\n};\r\n\r\nexport default handleMoveSnake;\r\n","import { parameterSpeed } from \"../global/elements.js\";\r\nimport {\r\n  boardSize,\r\n  gameInterval,\r\n  interval,\r\n  mute,\r\n  sizeRange,\r\n  snake,\r\n  snakeDidMove,\r\n  SPEED_CONSTANT,\r\n} from \"../global/variables.js\";\r\nimport handleDisplay from \"./handleDisplay.js\";\r\nimport { snakespeed } from \"./handleInitializeAudio.js\";\r\nimport handleUpdateSnake from \"./handleUpdateSnake.js\";\r\n\r\nconst handleIncreaseSnakeSpeed = () => {\r\n  if (snake.class.jumps % (Math.floor(boardSize / 10) * 9) === 0) {\r\n    snake.class.speed = snake.class.speed + 0.1;\r\n    if (!mute.isMuted) {\r\n      snakespeed.play();\r\n    }\r\n\r\n    parameterSpeed.classList.add(\"parameter-speed--acceleration\");\r\n    handleDisplay({ speed: snake.class.speed.toFixed(2) });\r\n\r\n    setTimeout(() => {\r\n      parameterSpeed.classList.remove(\"parameter-speed--acceleration\");\r\n    }, 1000);\r\n\r\n    interval.val =\r\n      750 / (boardSize / sizeRange.max) / SPEED_CONSTANT / snake.class.speed;\r\n\r\n    clearInterval(gameInterval.interval);\r\n    gameInterval.set(setInterval(handleJump, interval.val));\r\n  }\r\n};\r\n\r\nconst handleJump = () => {\r\n  handleUpdateSnake();\r\n\r\n  snake.class.jumps++;\r\n\r\n  // for (const bonus of bonuses) bonus.handleTransformBonus();\r\n\r\n  handleIncreaseSnakeSpeed();\r\n\r\n  snakeDidMove.toggle();\r\n};\r\n\r\nexport default handleJump;\r\n","import { boardSize, snake } from \"../global/variables.js\";\r\nimport handleMoveSnake from \"./handleMoveSnake.js\";\r\n\r\nconst handleUpdateSnake = () => {\r\n  switch (snake.class.direction) {\r\n    case \"W\":\r\n      snake.class.y = snake.class.y === 0 ? boardSize - 1 : snake.class.y - 1;\r\n\r\n      handleMoveSnake();\r\n      break;\r\n    case \"S\":\r\n      snake.class.y = snake.class.y === boardSize - 1 ? 0 : snake.class.y + 1;\r\n\r\n      handleMoveSnake();\r\n      break;\r\n    case \"A\":\r\n      snake.class.x = snake.class.x === 0 ? boardSize - 1 : snake.class.x - 1;\r\n\r\n      handleMoveSnake();\r\n      break;\r\n    case \"D\":\r\n      snake.class.x = snake.class.x === boardSize - 1 ? 0 : snake.class.x + 1;\r\n\r\n      handleMoveSnake();\r\n      break;\r\n    default:\r\n      console.error(\"#ERR: Nieprawidłowy kierunek!\");\r\n      break;\r\n  }\r\n};\r\n\r\nexport default handleUpdateSnake;\r\n","import { sound } from \"../global/elements.js\";\r\nimport { gameStarted, mute, snake, snakeDidMove } from \"../global/variables.js\";\r\nimport handleStartGame from \"./handleStartGame.js\";\r\n\r\nconst handleKeyPress = ({ key }) => {\r\n  if (key === \"M\") {\r\n    mute.isMuted = !mute.isMuted;\r\n    sound.classList.toggle(\"sound--muted\");\r\n    return;\r\n  }\r\n\r\n  if (\r\n    (key === \"W\" && snake.class.direction === \"S\") ||\r\n    (key === \"S\" && snake.class.direction === \"W\") ||\r\n    (key === \"A\" && snake.class.direction === \"D\") ||\r\n    (key === \"D\" && snake.class.direction === \"A\")\r\n  )\r\n    return;\r\n\r\n  if (!gameStarted.val) {\r\n    snake.class.direction = key;\r\n\r\n    handleStartGame();\r\n  }\r\n\r\n  if (gameStarted.val && snakeDidMove.state) {\r\n    snakeDidMove.toggle();\r\n    snake.class.direction = key;\r\n  }\r\n};\r\n\r\nexport default handleKeyPress;\r\n","import {\r\n  boardSize,\r\n  gameInterval,\r\n  gameStarted,\r\n  interval,\r\n  mute,\r\n  sizeRange,\r\n  snake,\r\n  SPEED_CONSTANT,\r\n  timer,\r\n  timerInterval,\r\n} from \"../global/variables.js\";\r\nimport handleDisplay from \"./handleDisplay.js\";\r\nimport { jump, start } from \"./handleInitializeAudio.js\";\r\nimport handleJump from \"./handleJump.js\";\r\n\r\nconst handleStartGame = () => {\r\n  gameStarted.val = true;\r\n\r\n  if (!mute.isMuted) {\r\n    start.play();\r\n  }\r\n\r\n  interval.val =\r\n    750 / (boardSize / sizeRange.max) / SPEED_CONSTANT / snake.class.speed;\r\n\r\n  gameInterval.set(setInterval(handleJump, interval.val));\r\n\r\n  timerInterval.set(\r\n    setInterval(() => {\r\n      if (!mute.isMuted) {\r\n        jump.play();\r\n      }\r\n\r\n      timer.time++;\r\n      handleDisplay({ timer: timer.time });\r\n    }, 1000)\r\n  );\r\n};\r\n\r\nexport default handleStartGame;\r\n","import handleGenerateBoard from \"./script/functions/handleGenerateBoard.js\";\r\nimport handleKeyPress from \"./script/functions/handleKeyPress.js\";\r\nimport { controlBtns, sound } from \"./script/global/elements.js\";\r\nimport {\r\n  W,\r\n  A,\r\n  S,\r\n  D,\r\n  M,\r\n  topKey,\r\n  bottomKey,\r\n  leftKey,\r\n  rightKey,\r\n} from \"./script/global/keys.js\";\r\nimport { mute } from \"./script/global/variables.js\";\r\nimport \"./style.css\";\r\n\r\nsound.addEventListener(\"click\", () => {\r\n  mute.isMuted = !mute.isMuted;\r\n  sound.classList.toggle(\"sound--muted\");\r\n});\r\n\r\ncontrolBtns.forEach((control, index) => {\r\n  control.addEventListener(\"mousedown\", () => {\r\n    control.classList.add(\"control--pressed\");\r\n  });\r\n\r\n  control.addEventListener(\"mouseup\", () => {\r\n    const controls = [\"W\", \"S\", \"A\", \"D\"];\r\n\r\n    control.classList.remove(\"control--pressed\");\r\n\r\n    handleKeyPress({ key: controls[index] });\r\n  });\r\n});\r\n\r\nlet key;\r\n\r\ndocument.addEventListener(\"keydown\", (e) => {\r\n  let keyCode = e.keyCode || e.key || e.keyIdentifier;\r\n\r\n  switch (keyCode) {\r\n    case W:\r\n    case topKey:\r\n      controlBtns[0].classList.add(\"control--pressed\");\r\n      break;\r\n    case S:\r\n    case bottomKey:\r\n      controlBtns[1].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n    case A:\r\n    case leftKey:\r\n      controlBtns[2].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n    case D:\r\n    case rightKey:\r\n      controlBtns[3].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"keyup\", (e) => {\r\n  let keyCode = e.keyCode || e.key || e.keyIdentifier;\r\n\r\n  controlBtns.forEach((control) =>\r\n    control.classList.remove(\"control--pressed\")\r\n  );\r\n\r\n  switch (keyCode) {\r\n    case W:\r\n    case topKey:\r\n      key = \"W\";\r\n\r\n      break;\r\n    case S:\r\n    case bottomKey:\r\n      key = \"S\";\r\n\r\n      break;\r\n    case A:\r\n    case leftKey:\r\n      key = \"A\";\r\n\r\n      break;\r\n    case D:\r\n    case rightKey:\r\n      key = \"D\";\r\n\r\n      break;\r\n    case M:\r\n      key = \"M\";\r\n\r\n      break;\r\n\r\n    default:\r\n      return;\r\n      break;\r\n  }\r\n\r\n  handleKeyPress({ key });\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", handleGenerateBoard);\r\n","export const W = 87;\r\nexport const A = 65;\r\nexport const S = 83;\r\nexport const D = 68;\r\nexport const M = 77;\r\n\r\nexport const topKey = 38;\r\nexport const bottomKey = 40;\r\nexport const leftKey = 37;\r\nexport const rightKey = 39;\r\n","import handleInitializeAudio from \"./handleInitializeAudio.js\";\r\nimport RandInt from \"./RandInt.js\";\r\nimport Snake from \"../classes/Snake.js\";\r\nimport {\r\n  board,\r\n  boardSize,\r\n  snake,\r\n  snakePositions,\r\n} from \"../global/variables.js\";\r\nimport handleDisplay from \"./handleDisplay.js\";\r\nimport { gameBoard } from \"../global/elements.js\";\r\nimport handlePlaceTile from \"./handlePlaceTile.js\";\r\n\r\nexport const handleAppendBoard = (tileCSS) => {\r\n  let tilesQty = 0;\r\n\r\n  for (let i = 0; i < boardSize; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < boardSize; j++) {\r\n      let tile = document.createElement(\"div\");\r\n\r\n      tile.classList.add(\"tile\");\r\n      tile.style.width = `${tileCSS.width - 2}px`;\r\n      tile.style.height = `${tileCSS.height - 2}px`;\r\n\r\n      gameBoard.appendChild(tile);\r\n      const tileQuery = document.querySelectorAll(\".tile\");\r\n\r\n      row.push(tileQuery[tilesQty]);\r\n\r\n      tilesQty++;\r\n    }\r\n    board.push(row);\r\n  }\r\n};\r\n\r\nexport const handleAppendSnake = () => {\r\n  for (let i = 0; i < snake.class.length; i++) {\r\n    let snakePos = {\r\n      x: snake.class.x,\r\n      y: snake.class.y + i,\r\n    };\r\n\r\n    snakePositions.unshift({ x: snakePos.x, y: snakePos.y });\r\n\r\n    let snakeEl = board[snake.class.y + i][snake.class.x];\r\n    snakeEl.classList.add(\"tile--snake\");\r\n  }\r\n};\r\n\r\nexport const getTileCSS = () => {\r\n  return {\r\n    width: gameBoard.clientWidth / boardSize,\r\n    height: gameBoard.clientHeight / boardSize,\r\n  };\r\n};\r\n\r\nconst handleGenerateBoard = () => {\r\n  handleInitializeAudio();\r\n\r\n  // TODO: generowanie planszy\r\n  let snakePos = {\r\n    x: RandInt({\r\n      min: Math.floor(boardSize / 2) - 3,\r\n      max: Math.floor(boardSize / 2) + 3,\r\n    }),\r\n    y: RandInt({\r\n      min: Math.floor(boardSize / 2) - 1,\r\n      max: Math.floor(boardSize / 2) + 1,\r\n    }),\r\n  };\r\n\r\n  snake.set({\r\n    payload: new Snake(\r\n      null,\r\n      Math.round(boardSize / 3),\r\n      1,\r\n      snakePos.x,\r\n      snakePos.y\r\n    ),\r\n  });\r\n\r\n  handleDisplay({\r\n    boardSize,\r\n    speed: snake.class.speed.toFixed(2),\r\n    length: snake.class.length,\r\n  });\r\n\r\n  let tileCSS = getTileCSS();\r\n\r\n  handleAppendBoard(tileCSS);\r\n  handleAppendSnake();\r\n\r\n  handlePlaceTile({ mode: \"food\" });\r\n};\r\n\r\nexport default handleGenerateBoard;\r\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","Audio","snakespeed","min","max","Math","ceil","floor","random","constructor","direction","speed","x","y","jumps","board","sizeRange","boardSize","size","input","prompt","parseInt","alert","class","set","payload","attr","food","bonuses","gameStarted","val","value","snakePositions","time","increment","isMuted","toggle","interval","func","snakeDidMove","state","querySelector","parameterSpeed","gameBoard","sound","controlBtns","querySelectorAll","snakeLength","timer","textContent","name","snake","clearInterval","timerInterval","gameInterval","mute","gameOver","play","handleIsEaten","classList","remove","mode","firstX","firstY","nextX","nextY","subX","subY","newX","newY","contains","unshift","add","setTimeout","handleTransformBonus","tiles","freeTiles","randTileId","indexOfFreeTile","Array","from","indexOf","tileCoordinates","bonus","push","console","error","shift","handleJump","setInterval","key","addEventListener","forEach","control","index","keyCode","keyIdentifier","volume","volue","snakePos","round","tileCSS","tilesQty","i","row","j","tile","createElement","style","width","height","appendChild","tileQuery","handleAppendBoard","clientWidth","clientHeight","handleAppendSnake"],"sourceRoot":""}