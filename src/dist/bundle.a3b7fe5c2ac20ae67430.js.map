{"version":3,"file":"bundle.a3b7fe5c2ac20ae67430.js","mappings":"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","sources":["webpack://snakejs/./src/script/functions/handleInitializeAudio.js","webpack://snakejs/./src/script/functions/handleKeyPress.js","webpack://snakejs/./src/script/global/elements.js","webpack://snakejs/./src/script/global/variables.js","webpack://snakejs/./src/script/functions/handleValidateBoardSize.js","webpack://snakejs/./src/script.js","webpack://snakejs/./src/script/functions/handleGenerateBoard.js"],"sourcesContent":["const handleInitializeAudio = () => {\r\n  const start = new Audio();\r\n  const jump = new Audio();\r\n  const snakespeed = new Audio();\r\n  const point = new Audio();\r\n  const gameOver = new Audio();\r\n\r\n  const POINT_SRC = \"./assets/point.mp3\";\r\n  const GAME_OVER_SRC = \"./assets/gameover.wav\";\r\n  const START_SRC = \"./assets/start.wav\";\r\n  const JUMP_SRC = \"./assets/jump.wav\";\r\n  const SNAKESPEED_SRC = \"./assets/snake_acceleration.wav\";\r\n\r\n  point.src = POINT_SRC;\r\n  gameOver.src = GAME_OVER_SRC;\r\n  snakespeed.src = SNAKESPEED_SRC;\r\n  jump.src = JUMP_SRC;\r\n  start.src = START_SRC;\r\n\r\n  start.volume = 0.07;\r\n  jump.volume = 0.1;\r\n  point.volue = 0.2;\r\n  snakespeed.volume = 0.3;\r\n  gameOver.volume = 0.3;\r\n};\r\n\r\nexport default handleInitializeAudio;\r\n","const handleKeyPress = ({ key }) => {\r\n  if (key === \"M\") {\r\n    mute = !mute;\r\n    sound.classList.toggle(\"sound--muted\");\r\n    return;\r\n  }\r\n\r\n  if (\r\n    (key === \"W\" && snake.direction === \"S\") ||\r\n    (key === \"S\" && snake.direction === \"W\") ||\r\n    (key === \"A\" && snake.direction === \"D\") ||\r\n    (key === \"D\" && snake.direction === \"A\")\r\n  )\r\n    return;\r\n\r\n  if (!gameStarted) {\r\n    snake.direction = key;\r\n\r\n    handleStartGame();\r\n  }\r\n\r\n  if (gameStarted && snakeDidMove) {\r\n    snakeDidMove = false;\r\n    snake.direction = key;\r\n  }\r\n};\r\n\r\nexport default handleKeyPress;\r\n","export const time = document.querySelector(\"[data-parameter=time]\");\r\nexport const size = document.querySelector(\"[data-parameter=board-size]\");\r\nexport const parameterSpeed = document.querySelector(\"[data-parameter=speed]\");\r\nexport const length = document.querySelector(\"[data-parameter=length]\");\r\n\r\nexport const topBtn = document.querySelector(\"[data-direction=top]\");\r\nexport const bottomBtn = document.querySelector(\"[data-direction=bottom]\");\r\nexport const leftBtn = document.querySelector(\"[data-direction=left]\");\r\nexport const rightBtn = document.querySelector(\"[data-direction=right]\");\r\n\r\nexport const gameBoard = document.querySelector(\".gameboard\");\r\n\r\nexport const sound = document.querySelector(\".sound\");\r\n\r\nexport const controlBtns = document.querySelectorAll(\".control\");\r\n","import handleValidateBoardSize from \"../functions/handleValidateBoardSize.js\";\r\n\r\n// board variables\r\nexport const board = [];\r\nexport const sizeRange = { min: 10, max: 50 };\r\nexport const boardSize = handleValidateBoardSize();\r\n\r\n// classes\r\nexport let snake;\r\nexport let food;\r\nexport const bonuses = [];\r\n\r\n// checks whether the game has already started\r\nexport let gameStarted = false;\r\n\r\n// contains positions of all snake's tiles\r\nexport const snakePositions = [];\r\n\r\nexport let timer = 0;\r\nexport let mute = false;\r\nexport let interval;\r\n\r\n// intervals\r\nexport let gameInterval;\r\nexport let timerInterval;\r\n\r\n// speed constant (used for snake intervals)\r\nexport const SPEED_CONSTANT = 4;\r\n\r\n// checks whether the snake has moved since last set direction\r\nexport let snakeDidMove = false;\r\n","import { sizeRange } from \"../global/variables.js\";\r\n\r\nconst handleValidateBoardSize = () => {\r\n  let size;\r\n\r\n  while (!size || size < sizeRange.min || size > sizeRange.max) {\r\n    const input = prompt(\r\n      `Podaj wielkość planszy (minimalna - ${sizeRange.min}, maksymalna - ${sizeRange.max}):`\r\n    );\r\n    size = parseInt(input);\r\n\r\n    if (!size || size < sizeRange.min || size > sizeRange.max) {\r\n      alert(\"Wprowadź poprawną wartość!\");\r\n    }\r\n  }\r\n\r\n  return size;\r\n};\r\n\r\nexport default handleValidateBoardSize;\r\n","import handleGenerateBoard from \"./script/functions/handleGenerateBoard.js\";\r\nimport handleKeyPress from \"./script/functions/handleKeyPress.js\";\r\nimport { controlBtns, sound } from \"./script/global/elements.js\";\r\nimport { mute } from \"./script/global/variables.js\";\r\n\r\nsound.addEventListener(\"click\", () => {\r\n  mute = !mute;\r\n  sound.classList.toggle(\"sound--muted\");\r\n});\r\n\r\ncontrolBtns.forEach((control, index) => {\r\n  control.addEventListener(\"mousedown\", () => {\r\n    control.classList.add(\"control--pressed\");\r\n  });\r\n\r\n  control.addEventListener(\"mouseup\", () => {\r\n    const controls = [\"W\", \"S\", \"A\", \"D\"];\r\n\r\n    control.classList.remove(\"control--pressed\");\r\n\r\n    handleKeyPress({ key: controls[index] });\r\n  });\r\n});\r\n\r\nlet key;\r\n\r\ndocument.addEventListener(\"keydown\", (e) => {\r\n  let keyCode = e.keyCode || e.key || e.keyIdentifier;\r\n\r\n  switch (keyCode) {\r\n    case W:\r\n    case topKey:\r\n      controlBtns[0].classList.add(\"control--pressed\");\r\n      break;\r\n    case S:\r\n    case bottomKey:\r\n      controlBtns[1].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n    case A:\r\n    case leftKey:\r\n      controlBtns[2].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n    case D:\r\n    case rightKey:\r\n      controlBtns[3].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"keyup\", (e) => {\r\n  let keyCode = e.keyCode || e.key || e.keyIdentifier;\r\n\r\n  controlBtns.forEach((control) =>\r\n    control.classList.remove(\"control--pressed\")\r\n  );\r\n\r\n  switch (keyCode) {\r\n    case W:\r\n    case topKey:\r\n      key = \"W\";\r\n\r\n      break;\r\n    case S:\r\n    case bottomKey:\r\n      key = \"S\";\r\n\r\n      break;\r\n    case A:\r\n    case leftKey:\r\n      key = \"A\";\r\n\r\n      break;\r\n    case D:\r\n    case rightKey:\r\n      key = \"D\";\r\n\r\n      break;\r\n    case M:\r\n      key = \"M\";\r\n\r\n      break;\r\n\r\n    default:\r\n      return;\r\n      break;\r\n  }\r\n\r\n  handleKeyPress({ key });\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", handleGenerateBoard);\r\n","import handleInitializeAudio from \"./handleInitializeAudio.js\";\r\n\r\nexport const handleAppendBoard = () => {\r\n  let tilesQty = 0;\r\n\r\n  for (let i = 0; i < boardSize; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < boardSize; j++) {\r\n      let tile = document.createElement(\"div\");\r\n\r\n      tile.classList.add(\"tile\");\r\n      tile.style.width = `${tileCSS.width - 2}px`;\r\n      tile.style.height = `${tileCSS.height - 2}px`;\r\n\r\n      gameBoard.appendChild(tile);\r\n      const tileQuery = document.querySelectorAll(\".tile\");\r\n\r\n      row.push(tileQuery[tilesQty]);\r\n\r\n      tilesQty++;\r\n    }\r\n    board.push(row);\r\n  }\r\n};\r\n\r\nexport const handleAppendSnake = () => {\r\n  for (i = 0; i < snake.length; i++) {\r\n    let snakePos = {\r\n      x: snake.x,\r\n      y: snake.y + i,\r\n    };\r\n\r\n    snakePositions.unshift({ x: snakePos.x, y: snakePos.y });\r\n\r\n    let snakeEl = board[snake.y + i][snake.x];\r\n    snakeEl.classList.add(\"tile--snake\");\r\n  }\r\n};\r\n\r\nexport const getTileCSS = () => {\r\n  return {\r\n    width: gameBoard.clientWidth / boardSize,\r\n    height: gameBoard.clientHeight / boardSize,\r\n  };\r\n};\r\n\r\nconst handleGenerateBoard = () => {\r\n  handleInitializeAudio();\r\n\r\n  // TODO: generowanie planszy\r\n  let snakePos = {\r\n    x: RandInt({\r\n      min: Math.floor(boardSize / 2) - 3,\r\n      max: Math.floor(boardSize / 2) + 3,\r\n    }),\r\n    y: RandInt({\r\n      min: Math.floor(boardSize / 2) - 1,\r\n      max: Math.floor(boardSize / 2) + 1,\r\n    }),\r\n  };\r\n\r\n  snake = new Snake(null, Math.round(boardSize / 3), 1, snakePos.x, snakePos.y);\r\n\r\n  handleDisplay({\r\n    boardSize,\r\n    speed: snake.speed.toFixed(2),\r\n    length: snake.length,\r\n  });\r\n\r\n  let tileCSS = getTileCSS();\r\n\r\n  handleAppendBoard();\r\n  handleAppendSnake();\r\n\r\n  handlePlaceTile({ mode: \"food\" });\r\n};\r\n\r\nexport default handleGenerateBoard;\r\n"],"names":["key","mute","sound","classList","toggle","snake","direction","gameStarted","handleStartGame","snakeDidMove","document","querySelector","controlBtns","querySelectorAll","sizeRange","min","max","size","input","prompt","parseInt","alert","forEach","control","index","addEventListener","add","remove","e","keyCode","keyIdentifier","W","topKey","S","bottomKey","A","leftKey","D","rightKey","M","start","Audio","jump","snakespeed","point","gameOver","src","volume","volue","snakePos","x","RandInt","Math","floor","boardSize","y","Snake","round","handleDisplay","speed","toFixed","length","gameBoard","clientWidth","clientHeight","tilesQty","i","row","j","tile","createElement","style","width","tileCSS","height","appendChild","tileQuery","push","board","handleAppendBoard","snakePositions","unshift","handleAppendSnake","handlePlaceTile","mode"],"sourceRoot":""}