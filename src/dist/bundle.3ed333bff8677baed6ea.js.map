{"version":3,"file":"bundle.3ed333bff8677baed6ea.js","mappings":"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","sources":["webpack://snakejs/webpack/bootstrap","webpack://snakejs/webpack/runtime/global","webpack://snakejs/webpack/runtime/publicPath","webpack://snakejs/./src/assets/point.mp3","webpack://snakejs/./src/assets/gameover.wav","webpack://snakejs/./src/assets/speed_acceleration.wav","webpack://snakejs/./src/assets/jump.wav","webpack://snakejs/./src/assets/start.wav","webpack://snakejs/./src/script/functions/RandInt.js","webpack://snakejs/./src/script/classes/Snake.js","webpack://snakejs/./src/script/global/variables.js","webpack://snakejs/./src/script/functions/handleValidateBoardSize.js","webpack://snakejs/./src/script/global/elements.js","webpack://snakejs/./src/script/classes/Boost.js","webpack://snakejs/./src/script/classes/Food.js","webpack://snakejs/./src/script/classes/Bonus.js","webpack://snakejs/./src/script/functions/handleKeyPress.js","webpack://snakejs/./src/script/functions/handleStartGame.js","webpack://snakejs/./src/script.js","webpack://snakejs/./src/script/global/keys.js","webpack://snakejs/./src/script/functions/handleGenerateBoard.js","webpack://snakejs/./src/script/functions/handleInitializeAudio.js","webpack://snakejs/./src/script/functions/handleDisplay.js","webpack://snakejs/./src/script/functions/handlePlaceTile.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export default __webpack_public_path__ + \"assets/point.a41846ef811ebc769132d677a9d33a21.mp3\";","export default __webpack_public_path__ + \"assets/gameover.0242c96fc833693dc721ea75ebb2d1b4.wav\";","export default __webpack_public_path__ + \"assets/speed_acceleration.952b0801786b04a70a0133de0ce831a6.wav\";","export default __webpack_public_path__ + \"assets/jump.ae2de8e7e136703f362699ea22c8a8c5.wav\";","export default __webpack_public_path__ + \"assets/start.105e220c664c62490ce0c19c670010fc.wav\";","const RandInt = ({ min, max }) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport default RandInt;\r\n","class Snake {\r\n  constructor(direction, length, speed, x, y, jumps = 0) {\r\n    this.direction = direction;\r\n    this.length = length;\r\n    this.speed = speed;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.jumps = jumps;\r\n  }\r\n}\r\n\r\nexport default Snake;\r\n","import handleValidateBoardSize from \"../functions/handleValidateBoardSize.js\";\r\n\r\n// board variables\r\nexport const board = [];\r\nexport const sizeRange = { min: 10, max: 50 };\r\nexport let boardSize = handleValidateBoardSize();\r\n\r\n// classes\r\nexport let snake = {\r\n  class: \"\",\r\n  set: ({ payload, attr }) => {\r\n    if (attr) {\r\n      snake.class[attr] = payload;\r\n      return;\r\n    }\r\n\r\n    snake.class = payload;\r\n  },\r\n};\r\nexport let food = {\r\n  class: \"\",\r\n  set: ({ payload, attr }) => {\r\n    if (attr) {\r\n      food.class[attr] = payload;\r\n      return;\r\n    }\r\n\r\n    food.class = payload;\r\n  },\r\n};\r\nexport const bonuses = [];\r\n\r\n// checks whether the game has already started\r\nexport let gameStarted = {\r\n  val: false,\r\n  set: (value) => {\r\n    gameStarted.val = value;\r\n  },\r\n};\r\n\r\n// contains positions of all snake's tiles\r\nexport const snakePositions = [];\r\n\r\nexport let timer = {\r\n  time: 0,\r\n  increment: () => {\r\n    timer.time++;\r\n  },\r\n};\r\n\r\nexport let mute = {\r\n  mute: false,\r\n  toggle: () => {\r\n    mute.mute = !mute.mute;\r\n  },\r\n};\r\nexport let interval = {\r\n  interval: 0,\r\n  set: (payload) => {\r\n    interval = payload;\r\n  },\r\n};\r\n\r\n// intervals\r\nexport let gameInterval = {\r\n  interval: \"\",\r\n  set: (func) => {\r\n    gameInterval = func;\r\n  },\r\n};\r\nexport let timerInterval = {\r\n  interval: \"\",\r\n  set: (func) => {\r\n    timerInterval = func;\r\n  },\r\n};\r\n\r\n// speed constant (used for snake intervals)\r\nexport const SPEED_CONSTANT = 4;\r\n\r\n// checks whether the snake has moved since last set direction\r\nexport let snakeDidMove = false;\r\n","import { sizeRange } from \"../global/variables.js\";\r\n\r\nconst handleValidateBoardSize = () => {\r\n  let size;\r\n\r\n  while (!size || size < sizeRange.min || size > sizeRange.max) {\r\n    const input = prompt(\r\n      `Podaj wielkość planszy (minimalna - ${sizeRange.min}, maksymalna - ${sizeRange.max}):`\r\n    );\r\n    size = parseInt(input);\r\n\r\n    if (!size || size < sizeRange.min || size > sizeRange.max) {\r\n      alert(\"Wprowadź poprawną wartość!\");\r\n    }\r\n  }\r\n\r\n  return size;\r\n};\r\n\r\nexport default handleValidateBoardSize;\r\n","export const time = document.querySelector(\"[data-parameter=time]\");\r\nexport const size = document.querySelector(\"[data-parameter=board-size]\");\r\nexport const parameterSpeed = document.querySelector(\"[data-parameter=speed]\");\r\nexport const length = document.querySelector(\"[data-parameter=length]\");\r\n\r\nexport const topBtn = document.querySelector(\"[data-direction=top]\");\r\nexport const bottomBtn = document.querySelector(\"[data-direction=bottom]\");\r\nexport const leftBtn = document.querySelector(\"[data-direction=left]\");\r\nexport const rightBtn = document.querySelector(\"[data-direction=right]\");\r\n\r\nexport const gameBoard = document.querySelector(\".gameboard\");\r\n\r\nexport const sound = document.querySelector(\".sound\");\r\n\r\nexport const controlBtns = document.querySelectorAll(\".control\");\r\n","class Boost {\r\n  constructor(x, y, name = \"\") {\r\n    this.name = name;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\nexport default Boost;\r\n","import Boost from \"./Boost.js\";\r\n\r\nclass Food extends Boost {\r\n  handleIsEaten = () => {\r\n    if (snake.x === this.x && snake.y === this.y) {\r\n      if (!mute) {\r\n        point.play();\r\n      }\r\n\r\n      board[this.y][this.x].classList.remove(\"tile--food\");\r\n      handlePlaceTile({ mode: \"food\" });\r\n\r\n      //TODO: adding new tiles to the end of the snake\r\n      const { x: firstX, y: firstY } = snakePositions[0];\r\n      const { x: nextX, y: nextY } = snakePositions[1];\r\n\r\n      const subX = nextX - firstX;\r\n      const subY = nextY - firstY;\r\n\r\n      const { newX, newY } = getNewTile(subX, subY, firstX, firstY);\r\n\r\n      snake.length++;\r\n      length.textContent = snake.length;\r\n      length.style.color = \"#d1d122\";\r\n\r\n      snakePositions.unshift({ x: newX, y: newY });\r\n      board[newY][newX].classList.add(\"tile--snake\");\r\n\r\n      setTimeout(() => {\r\n        length.style.color = \"#000\";\r\n      }, 300);\r\n    }\r\n  };\r\n}\r\n\r\nexport default Food;\r\n","import Boost from \"./Boost.js\";\r\n\r\nclass Bonus extends Boost {\r\n  handleTransformBonus = () => {};\r\n\r\n  handleIsEaten = () => {};\r\n}\r\n\r\nexport default Bonus;\r\n","import { gameStarted, snake, snakeDidMove } from \"../global/variables.js\";\r\nimport handleStartGame from \"./handleStartGame.js\";\r\n\r\nconst handleKeyPress = ({ key }) => {\r\n  if (key === \"M\") {\r\n    mute = !mute;\r\n    sound.classList.toggle(\"sound--muted\");\r\n    return;\r\n  }\r\n\r\n  if (\r\n    (key === \"W\" && snake.direction === \"S\") ||\r\n    (key === \"S\" && snake.direction === \"W\") ||\r\n    (key === \"A\" && snake.direction === \"D\") ||\r\n    (key === \"D\" && snake.direction === \"A\")\r\n  )\r\n    return;\r\n\r\n  if (!gameStarted) {\r\n    snake.direction = key;\r\n\r\n    handleStartGame();\r\n  }\r\n\r\n  if (gameStarted && snakeDidMove) {\r\n    snakeDidMove = false;\r\n    snake.direction = key;\r\n  }\r\n};\r\n\r\nexport default handleKeyPress;\r\n","import {\r\n  gameInterval,\r\n  gameStarted,\r\n  interval,\r\n  timerInterval,\r\n} from \"../global/variables.js\";\r\n\r\nconst handleStartGame = () => {\r\n  gameStarted.val = true;\r\n\r\n  if (!mute) {\r\n    start.play();\r\n  }\r\n\r\n  interval = 750 / (boardSize / sizeRange.max) / SPEED_CONSTANT / snake.speed;\r\n\r\n  gameInterval = setInterval(handleJump, interval);\r\n\r\n  timerInterval = setInterval(() => {\r\n    if (!mute) {\r\n      jump.play();\r\n    }\r\n\r\n    timer++;\r\n    handleDisplay({ timer });\r\n  }, 1000);\r\n};\r\n\r\nexport default handleStartGame;\r\n","import handleGenerateBoard from \"./script/functions/handleGenerateBoard.js\";\r\nimport handleKeyPress from \"./script/functions/handleKeyPress.js\";\r\nimport { controlBtns, sound } from \"./script/global/elements.js\";\r\nimport {\r\n  W,\r\n  A,\r\n  S,\r\n  D,\r\n  M,\r\n  topKey,\r\n  bottomKey,\r\n  leftKey,\r\n  rightKey,\r\n} from \"./script/global/keys.js\";\r\nimport { mute } from \"./script/global/variables.js\";\r\nimport \"./style.css\";\r\n\r\nsound.addEventListener(\"click\", () => {\r\n  mute = !mute;\r\n  sound.classList.toggle(\"sound--muted\");\r\n});\r\n\r\ncontrolBtns.forEach((control, index) => {\r\n  control.addEventListener(\"mousedown\", () => {\r\n    control.classList.add(\"control--pressed\");\r\n  });\r\n\r\n  control.addEventListener(\"mouseup\", () => {\r\n    const controls = [\"W\", \"S\", \"A\", \"D\"];\r\n\r\n    control.classList.remove(\"control--pressed\");\r\n\r\n    handleKeyPress({ key: controls[index] });\r\n  });\r\n});\r\n\r\nlet key;\r\n\r\ndocument.addEventListener(\"keydown\", (e) => {\r\n  let keyCode = e.keyCode || e.key || e.keyIdentifier;\r\n\r\n  switch (keyCode) {\r\n    case W:\r\n    case topKey:\r\n      controlBtns[0].classList.add(\"control--pressed\");\r\n      break;\r\n    case S:\r\n    case bottomKey:\r\n      controlBtns[1].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n    case A:\r\n    case leftKey:\r\n      controlBtns[2].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n    case D:\r\n    case rightKey:\r\n      controlBtns[3].classList.add(\"control--pressed\");\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"keyup\", (e) => {\r\n  let keyCode = e.keyCode || e.key || e.keyIdentifier;\r\n\r\n  controlBtns.forEach((control) =>\r\n    control.classList.remove(\"control--pressed\")\r\n  );\r\n\r\n  switch (keyCode) {\r\n    case W:\r\n    case topKey:\r\n      key = \"W\";\r\n\r\n      break;\r\n    case S:\r\n    case bottomKey:\r\n      key = \"S\";\r\n\r\n      break;\r\n    case A:\r\n    case leftKey:\r\n      key = \"A\";\r\n\r\n      break;\r\n    case D:\r\n    case rightKey:\r\n      key = \"D\";\r\n\r\n      break;\r\n    case M:\r\n      key = \"M\";\r\n\r\n      break;\r\n\r\n    default:\r\n      return;\r\n      break;\r\n  }\r\n\r\n  handleKeyPress({ key });\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", handleGenerateBoard);\r\n","export const W = 87;\r\nexport const A = 65;\r\nexport const S = 83;\r\nexport const D = 68;\r\nexport const M = 77;\r\n\r\nexport const topKey = 38;\r\nexport const bottomKey = 40;\r\nexport const leftKey = 37;\r\nexport const rightKey = 39;\r\n","import handleInitializeAudio from \"./handleInitializeAudio.js\";\r\nimport RandInt from \"./RandInt.js\";\r\nimport Snake from \"../classes/Snake.js\";\r\nimport { board, boardSize, snake } from \"../global/variables.js\";\r\nimport handleDisplay from \"./handleDisplay.js\";\r\nimport { gameBoard } from \"../global/elements.js\";\r\nimport handlePlaceTile from \"./handlePlaceTile.js\";\r\n\r\nexport const handleAppendBoard = (tileCSS) => {\r\n  let tilesQty = 0;\r\n\r\n  for (let i = 0; i < boardSize; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < boardSize; j++) {\r\n      let tile = document.createElement(\"div\");\r\n\r\n      tile.classList.add(\"tile\");\r\n      tile.style.width = `${tileCSS.width - 2}px`;\r\n      tile.style.height = `${tileCSS.height - 2}px`;\r\n\r\n      gameBoard.appendChild(tile);\r\n      const tileQuery = document.querySelectorAll(\".tile\");\r\n\r\n      row.push(tileQuery[tilesQty]);\r\n\r\n      tilesQty++;\r\n    }\r\n    board.push(row);\r\n  }\r\n};\r\n\r\nexport const handleAppendSnake = () => {\r\n  for (let i = 0; i < snake.length; i++) {\r\n    let snakePos = {\r\n      x: snake.x,\r\n      y: snake.y + i,\r\n    };\r\n\r\n    snakePositions.unshift({ x: snakePos.x, y: snakePos.y });\r\n\r\n    let snakeEl = board[snake.y + i][snake.x];\r\n    snakeEl.classList.add(\"tile--snake\");\r\n  }\r\n};\r\n\r\nexport const getTileCSS = () => {\r\n  return {\r\n    width: gameBoard.clientWidth / boardSize,\r\n    height: gameBoard.clientHeight / boardSize,\r\n  };\r\n};\r\n\r\nconst handleGenerateBoard = () => {\r\n  handleInitializeAudio();\r\n\r\n  // TODO: generowanie planszy\r\n  let snakePos = {\r\n    x: RandInt({\r\n      min: Math.floor(boardSize / 2) - 3,\r\n      max: Math.floor(boardSize / 2) + 3,\r\n    }),\r\n    y: RandInt({\r\n      min: Math.floor(boardSize / 2) - 1,\r\n      max: Math.floor(boardSize / 2) + 1,\r\n    }),\r\n  };\r\n\r\n  snake.set({\r\n    payload: new Snake(\r\n      null,\r\n      Math.round(boardSize / 3),\r\n      1,\r\n      snakePos.x,\r\n      snakePos.y\r\n    ),\r\n  });\r\n\r\n  console.log(snake);\r\n\r\n  handleDisplay({\r\n    boardSize,\r\n    speed: snake.class.speed.toFixed(2),\r\n    length: snake.class.length,\r\n  });\r\n\r\n  let tileCSS = getTileCSS();\r\n\r\n  handleAppendBoard(tileCSS);\r\n  handleAppendSnake();\r\n\r\n  handlePlaceTile({ mode: \"food\" });\r\n};\r\n\r\nexport default handleGenerateBoard;\r\n","import POINT_SRC from \"../../assets/point.mp3\";\r\nimport GAME_OVER_SRC from \"../../assets/gameover.wav\";\r\nimport SNAKESPEED_SRC from \"../../assets/speed_acceleration.wav\";\r\nimport JUMP_SRC from \"../../assets/jump.wav\";\r\nimport START_SRC from \"../../assets/start.wav\";\r\n\r\nconst handleInitializeAudio = () => {\r\n  const start = new Audio();\r\n  const jump = new Audio();\r\n  const snakespeed = new Audio();\r\n  const point = new Audio();\r\n  const gameOver = new Audio();\r\n\r\n  point.src = POINT_SRC;\r\n  gameOver.src = GAME_OVER_SRC;\r\n  snakespeed.src = SNAKESPEED_SRC;\r\n  jump.src = JUMP_SRC;\r\n  start.src = START_SRC;\r\n\r\n  start.volume = 0.07;\r\n  jump.volume = 0.1;\r\n  point.volue = 0.2;\r\n  snakespeed.volume = 0.3;\r\n  gameOver.volume = 0.3;\r\n};\r\n\r\nexport default handleInitializeAudio;\r\n","import { length, parameterSpeed, size, time } from \"../global/elements.js\";\r\n\r\nconst handleDisplay = ({ snakeLength, speed, timer, boardSize }) => {\r\n  if (speed) parameterSpeed.textContent = `${speed}`;\r\n  if (snakeLength) length.textContent = `Długość: ${snakeLength}`;\r\n  if (boardSize)\r\n    size.textContent = `Rozmiar planszy: ${boardSize}x${boardSize}`;\r\n  if (timer)\r\n    time.textContent = `Czas gry: \r\n    ${\r\n      Math.floor(timer / 60 / 60) < 10\r\n        ? \"0\" + Math.floor(timer / 60 / 60)\r\n        : Math.floor(timer / 60 / 60)\r\n    }:${\r\n      Math.floor(timer / 60) % 60 < 10\r\n        ? \"0\" + (Math.floor(timer / 60) % 60)\r\n        : Math.floor(timer / 60) % 60\r\n    }:${timer % 60 < 10 ? \"0\" + (timer % 60) : timer % 60}\r\n    `;\r\n};\r\n\r\nexport default handleDisplay;\r\n","import { board, boardSize, bonuses, food } from \"../global/variables.js\";\r\nimport RandInt from \"./RandInt.js\";\r\nimport Food from \"../classes/Food.js\";\r\nimport Bonus from \"../classes/Bonus.js\";\r\n\r\nconst handlePlaceTile = ({ mode }) => {\r\n  const tiles = document.querySelectorAll(\".tile\");\r\n  const freeTiles = document.querySelectorAll(\r\n    \".tile:not(.tile--snake):not(.tile--boost)\"\r\n  );\r\n\r\n  const randTileId = RandInt({ min: 0, max: freeTiles.length - 1 });\r\n\r\n  const indexOfFreeTile = Array.from(tiles).indexOf(freeTiles[randTileId]);\r\n  const tileCoordinates = {\r\n    x: indexOfFreeTile % boardSize,\r\n    y: Math.floor(indexOfFreeTile / boardSize),\r\n  };\r\n\r\n  // console.log(indexOfFreeTile % boardSize);\r\n\r\n  const { x, y } = tileCoordinates;\r\n\r\n  // mark food or bonus on the board\r\n  switch (mode) {\r\n    case \"food\":\r\n      food.class = new Food(x, y);\r\n\r\n      board[food.class.y][food.class.x].classList.add(\"tile--food\");\r\n      break;\r\n    case \"bonus\":\r\n      let bonus = new Bonus(\"bonus\", x, y);\r\n\r\n      bonuses.push(bonus);\r\n      break;\r\n    default:\r\n      console.error(\"#ERR! -> Przesłano niepoprawny typ bonusu\");\r\n      break;\r\n  }\r\n};\r\n\r\nexport default handlePlaceTile;\r\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","min","max","Math","ceil","floor","random","constructor","direction","speed","x","y","jumps","size","input","prompt","parseInt","alert","class","set","payload","attr","food","bonuses","gameStarted","val","value","mute","toggle","interval","gameInterval","func","timerInterval","snakeDidMove","time","querySelector","parameterSpeed","gameBoard","controlBtns","querySelectorAll","name","handleIsEaten","snake","point","play","board","classList","remove","handlePlaceTile","mode","firstX","firstY","snakePositions","nextX","nextY","subX","subY","newX","newY","getNewTile","textContent","style","color","unshift","add","setTimeout","handleTransformBonus","key","sound","start","boardSize","sizeRange","SPEED_CONSTANT","setInterval","handleJump","jump","timer","handleDisplay","forEach","control","index","addEventListener","keyCode","keyIdentifier","Audio","snakespeed","gameOver","volume","volue","snakePos","round","console","log","snakeLength","tileCSS","tilesQty","i","row","j","tile","createElement","width","height","appendChild","tileQuery","push","handleAppendBoard","clientWidth","clientHeight","handleAppendSnake","tiles","freeTiles","randTileId","indexOfFreeTile","Array","from","indexOf","tileCoordinates","bonus","error"],"sourceRoot":""}